{
  "name": "ssl-root-cas",
  "version": "1.1.7",
  "description": "The module you need to solve node's SSL woes when including a custom certificate.",
  "main": "ssl-root-cas",
  "scripts": {
    "test": "node ca-store-generator.js ssl-root-cas-test.js",
    "prepublish": "node ca-store-generator.js ssl-root-cas.js",
    "postinstall": "node latest.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/coolaj86/node-ssl-root-cas.git"
  },
  "keywords": [
    "SSL",
    "UNABLE_TO_VERIFY_LEAF_SIGNATURE",
    "CERT_UNTRUSTED",
    "CAS",
    "CA",
    "ROOT",
    "intermediate",
    "leaf",
    "error"
  ],
  "license": "Apache2",
  "bugs": {
    "url": "https://github.com/coolaj86/node-ssl-root-cas/issues"
  },
  "homepage": "https://github.com/coolaj86/node-ssl-root-cas",
  "dependencies": {
    "es6-promise": "^1.0.0",
    "request": "~2.34.0"
  },
  "contributors": [
    {
      "name": "Forrest L Norvell",
      "email": "forrest@newrelic.com"
    },
    {
      "name": "AJ ONeal",
      "email": "coolaj86@gmail.com",
      "url": "http://coolaj86.com"
    }
  ],
  "readme": "SSL Root CAs\n=================\n\nThe module you need to solve node's SSL woes when including a custom certificate.\n\nLet's say you're trying to connect to a site with a cheap-o SSL cert -\nsuch as RapidSSL certificate from [name.com](http://name.com) (the **best** place to get your domains, btw) -\nyou'll probably get an error like `UNABLE_TO_VERIFY_LEAF_SIGNATURE` and after you google around and figure that\nout you'll be able to connect to that site just fine, but now when you try to connect to other sites you get\n`CERT_UNTRUSTED` or possibly other errors.\n\nThis module is the solution to your woes!\n\nFYI, I'm merely the publisher, not the author of this module.\nSee here: https://groups.google.com/d/msg/nodejs/AjkHSYmiGYs/1LfNHbMhd48J\n\nThe script downloads the same root CAs that are included with\n[Mozilla Firefox](http://www.mozilla.org/en-US/about/governance/policies/security-group/certs/included/),\n[Google Chrome](http://www.chromium.org/Home/chromium-security/root-ca-policy),\n[`libnss`](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS#CA_certificates_pre-loaded_into_NSS),\nand [OpenSSL](https://www.openssl.org/support/faq.html#USER16)\\*:\n<https://mxr.mozilla.org/nss/source/lib/ckfw/builtins/certdata.txt?raw=1>\n\n\\* OpenSSL doesn't actually bundle these CAs, but they suggest using them\n\n**Other Implementations**\n\n  * Golang <https://github.com/agl/extract-nss-root-certs>\n  * Perl <https://github.com/bagder/curl/blob/master/lib/mk-ca-bundle.pl>\n\nUsage\n=====\n\n```javascript\n'use strict';\n \n// This will add the well-known CAs\n// to `https.globalAgent.options.ca`\nrequire('ssl-root-cas/latest')\n  .inject()\n  .addFile(__dirname + '/ssl/01-cheap-ssl-intermediary-a.pem')\n  .addFile(__dirname + '/ssl/02-cheap-ssl-intermediary-b.pem')\n  .addFile(__dirname + '/ssl/03-cheap-ssl-site.pem')\n  ;\n```\n\nFor the sake of version consistency this package ships with the CA certs that were\navailable at the time it was published,\nbut for the sake of security I recommend you use the latest ones.\n\nIf you want the latest certificates (downloaded as part of the postinstall process), \nyou can require those like so:\n\n```\nrequire('ssl-root-cas/latest').inject();\n```\n\nYou can use the ones that shippped with package like so:\n\n```\nrequire('ssl-root-cas').inject();\n```\n\nAPI\n---\n\n### inject()\n\nI thought it might be rude to modify `https.globalAgent.options.ca` on `require`,\nso I afford you the opportunity to `inject()` the certs at your leisure.\n\n`inject()` keeps track of whether or not it's been run, so no worries about calling it twice.\n\n### addFile(filepath)\n\nThis is just a convenience method so that you don't\nhave to require `fs` and `path` if you don't need them.\n\n```javascript\nrequire('ssl-root-cas/latest')\n  .addFile(__dirname + '/ssl/03-cheap-ssl-site.pem')\n  ;\n```\n\nis the same as\n\n```javascript\nvar https = require('https')\n  , cas\n  ;\n \ncas = https.globalAgent.options.ca || [];\ncas.push(fs.readFileSync(path.join(__dirname, 'ssl', '03-cheap-ssl-site.pem')));\n```\n\n### rootCas\n\nIf for some reason you just want to look at the array of Root CAs without actually injecting\nthem, or you just prefer to\n`https.globalAgent.options.ca = require('ssl-root-cas').rootCas;`\nyourself, well, you can.\n\nBAD IDEAS\n===\n\nDon't use dissolutions such as these. :-)\n\nThis will turn off SSL validation checking. This is not a good idea. Please do not do it.\n(really I'm only providing it as a reference for search engine seo so that people who are trying\nto figure out how to avoid doing that will end up here)\n\n```javascript\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\"\n```\n\nThe same dissolution from the terminal would be\n\n```bash\nexport NODE_TLS_REJECT_UNAUTHORIZED=\"0\"\nnode my-service.js\n```\n\n# Index\n\nOther information you might want to know while you're here.\n\n## Generating an SSL Cert\n\nJust in case you didn't know, here's how you do it:\n\n```\nopenssl req -new -newkey rsa:2048 -nodes -keyout server.key -out server.csr\n```\n\n**DO NOT FILL OUT** email address, challenge password, or optional company name\n\nHowever, you *should* fill out country name, FULL state name, locality name, organization name.\n\n*organizational unit* is optional.\n\n```\ncat server.csr\n```\n\nThat creates a sha-1 hash.\n\nWhen you submit that to the likes of RapidSSL you'll get back an X.509 that you should call `server.crt` (at least for the purposes of this mini-tutorial).\n\nYou cannot use \"bundled\" certificates (`.pem`) with node.js.\n\n### A single HTTPS server\n\nHere's a complete working example:\n\n```javascript\n'use strict';\n\nvar https = require('https')\n  , fs = require('fs')\n  , connect = require('connect')\n  , app = connect()\n  , sslOptions\n  , server\n  , port = 4080\n  ;\n\nrequire('ssl-root-cas/latest')\n  .inject()\n  .addFile(__dirname + '/ssl/Geotrust Cross Root CA.txt')\n  .addFile(__dirname + '/ssl/Rapid SSL CA.txt')\n  ;\n\nsslOptions = {\n  key: fs.readFileSync('./ssl/server.key')\n, cert: fs.readFileSync('./ssl/server.crt')\n};\n\napp.use('/', function (req, res) {\n  res.end('<html><body><h1>Hello World</h1></body></html>');\n});\n\nserver = https.createServer(sslOptions, app).listen(port, function(){\n  console.log('Listening on https://' + server.address().address + ':' + server.address().port);\n});\n```\n\n### Multiple HTTPS servers using SNI\n\nI know this works - because I just bought two SSL certs from RapidSSL (through name.com),\na Digital Ocean VPS,\nand played around for an hour until it did.\n\n:-)\n\nFile hierarchy:\n\n```\nwebapps/\n└── vhosts\n    ├── aj.the.dj\n    │   └── ssl\n    │       ├── server.crt\n    │       └── server.key\n    ├── ballprovo.com\n    │   └── ssl\n    │       ├── server.crt\n    │       └── server.key\n    ├── server.js\n    └── ssl\n        ├── Geotrust Cross Root CA.txt\n        └── Rapid SSL CA.txt\n```\n\n\n#### `server.js`\n\n```javascript\n'use strict';\n\nvar https = require('https')\n  , http = require('http')\n  , fs = require('fs')\n  , crypto = require('crypto')\n  , connect = require('connect')\n  , vhost = require('vhost')\n\n  // connect / express app\n  , app = connect()\n\n  // SSL Server\n  , secureContexts = {}\n  , secureOpts\n  , secureServer\n  , securePort = 4443\n\n  // force SSL upgrade server\n  , server\n  , port = 4080\n\n  // the ssl domains I have\n  , domains = ['aj.the.dj', 'ballprovo.com']\n  ;\n\nrequire('ssl-root-cas/latest')\n  .inject()\n  .addFile(__dirname + '/ssl/Geotrust Cross Root CA.txt')\n  .addFile(__dirname + '/ssl/Rapid SSL CA.txt')\n  ;\n\nfunction getAppContext(domain) {\n  // Really you'd want to do this:\n  // return require(__dirname + '/' + domain + '/app.js');\n\n  // But for this demo we'll do this:\n  return connect().use('/', function (req, res) {\n    console.log('req.vhost', JSON.stringify(req.vhost));\n    res.end('<html><body><h1>Welcome to ' + domain + '!</h1></body></html>');\n  });\n}\n\ndomains.forEach(function (domain) {\n  secureContexts[domain] = crypto.createCredentials({\n    key:  fs.readFileSync(__dirname + '/' + domain + '/ssl/server.key')\n  , cert: fs.readFileSync(__dirname + '/' + domain + '/ssl/server.crt')\n  }).context;\n\n  app.use(vhost('*.' + domain, getAppContext(domain)));\n  app.use(vhost(domain, getAppContext(domain)));\n});\n\n// fallback / default domain\napp.use('/', function (req, res) {\n  res.end('<html><body><h1>Hello World</h1></body></html>');\n});\n\n//provide a SNICallback when you create the options for the https server\nsecureOpts = {\n  //SNICallback is passed the domain name, see NodeJS docs on TLS\n  SNICallback: function (domain) {\n    console.log('SNI:', domain);\n    return secureContexts[domain];\n  }\n  // fallback / default domain\n  , key:  fs.readFileSync(__dirname + '/aj.the.dj/ssl/server.key')\n  , cert: fs.readFileSync(__dirname + '/aj.the.dj/ssl/server.crt')\n};\n\nsecureServer = https.createServer(secureOpts, app).listen(securePort, function(){\n  console.log(\"Listening on https://localhost:\" + secureServer.address().port);\n});\n\nserver = http.createServer(function (req, res) {\n  res.setHeader(\n    'Location'\n  , 'https://' + req.headers.host.replace(/:\\d+/, ':' + securePort)\n  );\n  res.statusCode = 302;\n  res.end();\n}).listen(port, function(){\n  console.log(\"Listening on http://localhost:\" + server.address().port);\n});\n```\n",
  "readmeFilename": "README.md",
  "_id": "ssl-root-cas@1.1.7",
  "dist": {
    "shasum": "bb40ea00cf92dd5d80b3f92979348f7b56b2b5a4"
  },
  "_from": "ssl-root-cas@^1.1.7",
  "_resolved": "https://registry.npmjs.org/ssl-root-cas/-/ssl-root-cas-1.1.7.tgz"
}
